name: '🔍 Discover Cleanup'

on:
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/🔍-discover-cleanup.yml'
      - '.github/scripts/setup/cleanup_project_based.sh'

permissions:
  contents: write

jobs:
  discover:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install jq
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        with:
          version: latest

      - name: Configure JFrog CLI for Admin
        env:
          JFROG_URL: ${{ vars.JFROG_URL }}
          JFROG_ADMIN_TOKEN: ${{ secrets.JFROG_ADMIN_TOKEN }}
        run: |
          jfrog config add bookverse-admin --url="$JFROG_URL" --access-token="$JFROG_ADMIN_TOKEN" --interactive=false --overwrite
          jfrog config use bookverse-admin

      - name: Run discovery-only (no deletion)
        env:
          JFROG_URL: ${{ vars.JFROG_URL }}
          JFROG_ADMIN_TOKEN: ${{ secrets.JFROG_ADMIN_TOKEN }}
          PROJECT_KEY: 'bookverse'
        run: |
          # Source the script and call discovery entrypoint directly
          # Avoid -e so the step does not fail on non-zero from subshells
          set +e
          cd .github/scripts/setup
          export SKIP_PROTECTION=true
          # Source script (it sets -e internally); then disable -e and run discovery-only
          source ./cleanup_project_based.sh
          set +e
          run_discovery_preview || true
          cd -

      - name: Commit shared discovery report
        run: |
          # Locate report anywhere in the workspace
          report_path=$(find "$GITHUB_WORKSPACE" -type f -name "*cleanup-report.json" -print -quit)
          if [[ -n "$report_path" ]]; then
            echo "Found report at: $report_path"
            mkdir -p .github
            dest_path=".github/cleanup-report.json"
            # Copy only if paths differ
            if [[ "$report_path" != "$GITHUB_WORKSPACE/$dest_path" ]]; then
              cp "$report_path" "$dest_path"
            else
              echo "Report already at $dest_path"
            fi
            git config --global user.name "BookVerse Discovery Bot"
            git config --global user.email "discovery@bookverse.demo"
            git add "$dest_path"
            if git diff --cached --quiet; then
              echo "📋 No changes to commit for cleanup report"
            else
              git commit -m "chore: Update cleanup discovery report"
              git push origin ${{ github.ref_name }}
              echo "📋 Cleanup report committed and pushed"
            fi
          else
            echo "⚠️ No cleanup report found"
          fi

      - name: 📋 Discovery Report Summary
        run: |
          echo "## 🔍 Cleanup Discovery Report" >> $GITHUB_STEP_SUMMARY
          if [[ -f ".github/cleanup-report.json" ]]; then
            ts=$(jq -r '.metadata.timestamp' .github/cleanup-report.json)
            proj=$(jq -r '.metadata.project_key' .github/cleanup-report.json)
            total=$(jq -r '.metadata.total_items' .github/cleanup-report.json)
            repos=$(jq -r '.metadata.discovery_counts.repositories' .github/cleanup-report.json)
            users=$(jq -r '.metadata.discovery_counts.users' .github/cleanup-report.json)
            apps=$(jq -r '.metadata.discovery_counts.applications' .github/cleanup-report.json)
            stages=$(jq -r '.metadata.discovery_counts.stages' .github/cleanup-report.json)
            builds=$(jq -r '.metadata.discovery_counts.builds' .github/cleanup-report.json)
            echo "Generated: $ts" >> $GITHUB_STEP_SUMMARY
            echo "Project: $proj" >> $GITHUB_STEP_SUMMARY
            echo "Total items: $total" >> $GITHUB_STEP_SUMMARY
            echo "- 📦 Repositories: $repos" >> $GITHUB_STEP_SUMMARY
            echo "- 👥 Users: $users" >> $GITHUB_STEP_SUMMARY
            echo "- 🚀 Applications: $apps" >> $GITHUB_STEP_SUMMARY
            echo "- 🏷️ Stages: $stages" >> $GITHUB_STEP_SUMMARY
            echo "- 🔧 Builds: $builds" >> $GITHUB_STEP_SUMMARY

            # Use structured plan arrays for reliable listing
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔎 Detailed Items Discovered" >> $GITHUB_STEP_SUMMARY

            echo "#### 📦 Repositories ($repos)" >> $GITHUB_STEP_SUMMARY
            repo_list=$(jq -r '.plan.repositories[]?.key' .github/cleanup-report.json 2>/dev/null || true)
            if [[ -n "$repo_list" ]]; then echo "$repo_list" | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY; else echo "- None" >> $GITHUB_STEP_SUMMARY; fi

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "#### 👥 Users ($users)" >> $GITHUB_STEP_SUMMARY
            user_list=$(jq -r '.plan.users[]? | if (.roles|length)>0 then "\(.name) (roles: \(.roles|join(", ")) )" else .name end' .github/cleanup-report.json 2>/dev/null || true)
            if [[ -n "$user_list" ]]; then echo "$user_list" | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY; else echo "- None" >> $GITHUB_STEP_SUMMARY; fi

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "#### 🚀 Applications ($apps)" >> $GITHUB_STEP_SUMMARY
            app_list=$(jq -r '.plan.applications[]?.key' .github/cleanup-report.json 2>/dev/null || true)
            if [[ -n "$app_list" ]]; then echo "$app_list" | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY; else echo "- None" >> $GITHUB_STEP_SUMMARY; fi

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "#### 🏷️ Stages ($stages)" >> $GITHUB_STEP_SUMMARY
            stage_list=$(jq -r '.plan.stages[]?.name' .github/cleanup-report.json 2>/dev/null || true)
            if [[ -n "$stage_list" ]]; then echo "$stage_list" | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY; else echo "- None" >> $GITHUB_STEP_SUMMARY; fi

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "#### 🔧 Builds ($builds)" >> $GITHUB_STEP_SUMMARY
            build_list=$(jq -r '.plan.builds[]?.name' .github/cleanup-report.json 2>/dev/null || true)
            if [[ -n "$build_list" ]]; then echo "$build_list" | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY; else echo "- None" >> $GITHUB_STEP_SUMMARY; fi

            # Safety checks: ensure all items belong to the expected project
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🛡️ Safety Checks" >> $GITHUB_STEP_SUMMARY
            rpt_project=$(jq -r '.metadata.project_key' .github/cleanup-report.json)
            echo "- Expected project: $rpt_project" >> $GITHUB_STEP_SUMMARY
            repos_oop=$(jq -r --arg p "$rpt_project" '[.plan.repositories[]? | select(.project != $p)] | length' .github/cleanup-report.json)
            apps_oop=$(jq -r --arg p "$rpt_project" '[.plan.applications[]? | select(.project != $p)] | length' .github/cleanup-report.json)
            users_oop=$(jq -r --arg p "$rpt_project" '[.plan.users[]? | select(.project != $p)] | length' .github/cleanup-report.json)
            stages_oop=$(jq -r --arg p "$rpt_project" '[.plan.stages[]? | select(.project != $p)] | length' .github/cleanup-report.json)
            builds_oop=$(jq -r --arg p "$rpt_project" '[.plan.builds[]? | select(.project != $p)] | length' .github/cleanup-report.json)
            if [[ "$repos_oop" == "0" && "$apps_oop" == "0" && "$users_oop" == "0" && "$stages_oop" == "0" && "$builds_oop" == "0" ]]; then
              echo "- All items belong to project '$rpt_project'" >> $GITHUB_STEP_SUMMARY
            else
              echo "- Out-of-project items detected:" >> $GITHUB_STEP_SUMMARY
              echo "  • Repositories: $repos_oop" >> $GITHUB_STEP_SUMMARY
              echo "  • Applications: $apps_oop" >> $GITHUB_STEP_SUMMARY
              echo "  • Users: $users_oop" >> $GITHUB_STEP_SUMMARY
              echo "  • Stages: $stages_oop" >> $GITHUB_STEP_SUMMARY
              echo "  • Builds: $builds_oop" >> $GITHUB_STEP_SUMMARY
            fi

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "<details>" >> $GITHUB_STEP_SUMMARY
            echo "<summary>📄 Raw Discovery Preview</summary>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            # Extract deletion preview content from report for full text context
            preview_file="/tmp/deletion_preview.txt"
            jq -r '.deletion_preview // .deletion_plan // ""' .github/cleanup-report.json > "$preview_file"
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat "$preview_file" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "</details>" >> $GITHUB_STEP_SUMMARY

            # Link to committed report in repository
            report_url="https://github.com/${GITHUB_REPOSITORY}/blob/${GITHUB_REF_NAME}/.github/cleanup-report.json"
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔗 Report File" >> $GITHUB_STEP_SUMMARY
            echo "[View cleanup-report.json]($report_url)" >> $GITHUB_STEP_SUMMARY
          else
            echo "No report generated" >> $GITHUB_STEP_SUMMARY
          fi
