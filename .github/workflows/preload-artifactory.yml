name: Preload Dependencies into Artifactory

on:
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual preload'
        required: false
        default: 'Initial cache warmup'
        type: string
  schedule:
    - cron: '17 3 * * *'

jobs:
  python-preload:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout (init repo)
        uses: actions/checkout@v4

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JFROG_URL }}
          JF_PROJECT: ${{ vars.PROJECT_KEY }}
        with:
          version: latest
          disable-job-summary: false
          disable-auto-build-publish: true
          disable-auto-evidence-collection: true

      - name: Configure JFrog CLI (admin token)
        env:
          JF_URL: ${{ vars.JFROG_URL }}
          JF_PROJECT: ${{ vars.PROJECT_KEY }}
          JFROG_ADMIN_TOKEN: ${{ secrets.JFROG_ADMIN_TOKEN }}
        run: |
          jf c add bookverse-admin --interactive=false --url "$JF_URL" --access-token "$JFROG_ADMIN_TOKEN"
          jf c use bookverse-admin
          jf c show

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Compose service requirements
        run: |
          set -euo pipefail
          mkdir -p preload/py
          # bookverse-inventory
          cat > preload/py/requirements-inventory.txt <<'EOF'
          fastapi==0.111.0
          uvicorn[standard]==0.30.0
          sqlalchemy==2.0.23
          pydantic==2.5.0
          EOF
          # bookverse-recommendations
          cat > preload/py/requirements-recommendations.txt <<'EOF'
          fastapi==0.111.0
          uvicorn[standard]==0.30.0
          httpx==0.27.0
          python-dotenv==1.0.1
          pytest==8.3.2
          EOF
          # bookverse-checkout
          cat > preload/py/requirements-checkout.txt <<'EOF'
          fastapi==0.111.0
          uvicorn[standard]==0.30.0
          httpx==0.27.0
          SQLAlchemy==2.0.32
          pydantic==2.8.2
          EOF

      - name: Warm PyPI virtual cache (all services)
        env:
          PROJECT_KEY: ${{ vars.PROJECT_KEY }}
        run: |
          set -euo pipefail
          jf pipc --repo-resolve "${PROJECT_KEY}-pypi-virtual"
          for req in preload/py/*.txt; do
            echo "🔎 Installing $req via Artifactory to warm cache"
            python -m venv .venv
            . .venv/bin/activate
            python -m pip install --upgrade "pip<25"
            # Use jf wrapper to ensure resolution through Artifactory
            if ! jf pip install -r "$req"; then
              echo "⚠️ jf pip failed for $req; trying direct pip against virtual index"
              pip install -r "$req" -i "${{ vars.JFROG_URL }}/artifactory/api/pypi/${PROJECT_KEY}-pypi-virtual/simple"
            fi
            deactivate || true
            rm -rf .venv
          done

      - name: Warm PyPI test toolchain (pytest, pytest-cov, httpx)
        env:
          PROJECT_KEY: ${{ vars.PROJECT_KEY }}
        run: |
          set -euo pipefail
          jf pipc --repo-resolve "${PROJECT_KEY}-pypi-virtual"
          python -m venv .venv
          . .venv/bin/activate
          python -m pip install --upgrade "pip<25"
          if ! jf pip install pytest pytest-cov httpx; then
            pip install pytest pytest-cov httpx -i "${{ vars.JFROG_URL }}/artifactory/api/pypi/${PROJECT_KEY}-pypi-virtual/simple"
          fi
          deactivate || true
          rm -rf .venv

  npm-preload:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout (init repo)
        uses: actions/checkout@v4

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JFROG_URL }}
          JF_PROJECT: ${{ vars.PROJECT_KEY }}
        with:
          version: latest
          disable-job-summary: false
          disable-auto-build-publish: true
          disable-auto-evidence-collection: true

      - name: Configure JFrog CLI (admin token)
        env:
          JF_URL: ${{ vars.JFROG_URL }}
          JF_PROJECT: ${{ vars.PROJECT_KEY }}
          JFROG_ADMIN_TOKEN: ${{ secrets.JFROG_ADMIN_TOKEN }}
        run: |
          jf c add bookverse-admin --interactive=false --url "$JF_URL" --access-token "$JFROG_ADMIN_TOKEN"
          jf c use bookverse-admin
          jf c show

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Configure npm to use Artifactory virtual repo
        env:
          PROJECT_KEY: ${{ vars.PROJECT_KEY }}
        run: |
          set -euo pipefail
          jf npm-config --repo-resolve "${PROJECT_KEY}-npm-virtual"
          cat ~/.npmrc || true

      - name: Create preload package.json
        run: |
          set -euo pipefail
          mkdir -p preload/npm
          cat > preload/npm/package.json <<'EOF'
          {
            "name": "bookverse-preload",
            "version": "1.0.0",
            "private": true,
            "devDependencies": {
              "vite": "5.4.19"
            }
          }
          EOF

      - name: Warm npm virtual cache (vite and transitives)
        working-directory: preload/npm
        run: |
          set -euo pipefail
          jf npm install
          # Show a few resolved packages for diagnostics
          npm ls --depth=1 || true


