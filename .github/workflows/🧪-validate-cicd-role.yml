name: "🧪 Validate cicd_pipeline Role Creation"

on:
  workflow_dispatch:

jobs:
  validate-role:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create cicd_pipeline role with provided payload
        env:
          JFROG_URL: ${{ vars.JFROG_URL }}
          JFROG_ADMIN_TOKEN: ${{ secrets.JFROG_ADMIN_TOKEN }}
          PROJECT_KEY: ${{ vars.PROJECT_KEY || 'bookverse' }}
        shell: bash
        run: |
          set -euo pipefail
          : "${JFROG_URL:?missing JFROG_URL}"
          : "${JFROG_ADMIN_TOKEN:?missing JFROG_ADMIN_TOKEN}"

          read -r -d '' PAYLOAD <<'JSON'
          {
            "name": "cicd_pipeline",
            "description": "Role for QA and testing activities, allowing read access to dev repositories.",
            "type": "CUSTOM",
            "actions": [
              "ANNOTATE_BUILD",
              "ANNOTATE_RELEASE_BUNDLE",
              "ANNOTATE_REPOSITORY",
              "BIND_APPLICATION",
              "CREATE_APPLICATION",
              "CREATE_RELEASE_BUNDLE",
              "DELETE_APPLICATION",
              "DELETE_BUILD",
              "DELETE_OVERWRITE_REPOSITORY",
              "DELETE_RELEASE_BUNDLE",
              "DEPLOY_BUILD",
              "DEPLOY_CACHE_REPOSITORY",
              "PROMOTE_APPLICATION",
              "READ_APPLICATION",
              "READ_BUILD",
              "READ_RELEASE_BUNDLE",
              "READ_REPOSITORY"
            ],
            "environments": [
              "bookverse-DEV",
              "bookverse-QA",
              "bookverse-STAGING",
              "PROD",
              "DEV"
            ]
          }
          JSON

          echo "Request payload:"; echo "$PAYLOAD" | jq . || echo "$PAYLOAD"
          OUT=$(mktemp)
          CODE=$(curl -sS -L -o "$OUT" -w "%{http_code}" \
            -H "Authorization: Bearer ${JFROG_ADMIN_TOKEN}" \
            -H "Content-Type: application/json" \
            -X POST \
            -d "$PAYLOAD" \
            "${JFROG_URL}/access/api/v1/projects/${PROJECT_KEY}/roles")
          echo "HTTP $CODE"; cat "$OUT" || true
          # Accept 200/201 (created/ok) and 409 (already exists)
          if [[ "$CODE" =~ ^20 || "$CODE" == "409" ]]; then
            echo "✅ Role creation validated (HTTP $CODE)" | tee -a "$GITHUB_STEP_SUMMARY"
          else
            echo "❌ Role creation failed (HTTP $CODE)" | tee -a "$GITHUB_STEP_SUMMARY"
            exit 1
          fi

