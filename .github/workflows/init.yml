name: 'Initialize JFrog Platform for BookVerse Demo'

on:
  workflow_dispatch:

jobs:
  setup-platform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        with:
          version: latest

      - name: Configure JFrog CLI for Admin
        run: |
          jfrog config add bookverse-admin --url=${{ vars.JFROG_URL }} --access-token=${{ secrets.JFROG_ADMIN_TOKEN }} --interactive=false
          jfrog config use bookverse-admin

      - name: Validate JFROG_ADMIN_TOKEN presence
        env:
          TOKEN: ${{ secrets.JFROG_ADMIN_TOKEN }}
        run: |
          set -euo pipefail
          if [ -z "${TOKEN}" ]; then
            echo "❌ JFROG_ADMIN_TOKEN is empty or not configured" >&2
            exit 1
          fi
          echo "✅ JFROG_ADMIN_TOKEN present (length: ${#TOKEN})"

      - name: Preflight JFrog connectivity (HTTP codes)
        env:
          JFROG_URL: ${{ vars.JFROG_URL }}
          JFROG_ADMIN_TOKEN: ${{ secrets.JFROG_ADMIN_TOKEN }}
        run: |
          set -euo pipefail
          URL_NO_SLASH="${JFROG_URL%/}"
          echo "JFROG_URL=${URL_NO_SLASH}"
          code_ping=$(curl -s -o /dev/null -w "%{http_code}" "${URL_NO_SLASH}/access/api/v1/system/ping"); echo "GET /access/api/v1/system/ping -> ${code_ping}"
          code_projects=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer ${JFROG_ADMIN_TOKEN}" "${URL_NO_SLASH}/access/api/v1/projects"); echo "GET /access/api/v1/projects -> ${code_projects}"
          code_lifecycle=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer ${JFROG_ADMIN_TOKEN}" "${URL_NO_SLASH}/access/api/v2/lifecycle/?project_key=bookverse"); echo "GET /access/api/v2/lifecycle -> ${code_lifecycle}"
          if [ "${code_ping}" != "200" ]; then echo "❌ system/ping failed"; exit 1; fi
          if [ "${code_projects}" != "200" ]; then echo "❌ projects API unauthorized/failed"; exit 1; fi

      - name: Create Project
        env:
          JFROG_URL: ${{ vars.JFROG_URL }}
          JFROG_ADMIN_TOKEN: ${{ secrets.JFROG_ADMIN_TOKEN }}
        run: ./.github/scripts/setup/create_project.sh

      # Reordered: stages first, then repositories (repos require stage environments)
      - name: Create AppTrust Stages
        env:
          JFROG_URL: ${{ vars.JFROG_URL }}
          JFROG_ADMIN_TOKEN: ${{ secrets.JFROG_ADMIN_TOKEN }}
        run: ./.github/scripts/setup/create_stages.sh

      - name: Create Repositories
        env:
          JFROG_URL: ${{ vars.JFROG_URL }}
          JFROG_ADMIN_TOKEN: ${{ secrets.JFROG_ADMIN_TOKEN }}
        run: ./.github/scripts/setup/create_repositories.sh

      - name: Create Users
        env:
          JFROG_URL: ${{ vars.JFROG_URL }}
          JFROG_ADMIN_TOKEN: ${{ secrets.JFROG_ADMIN_TOKEN }}
        run: ./.github/scripts/setup/create_users.sh

      - name: Create Applications
        env:
          JFROG_URL: ${{ vars.JFROG_URL }}
          JFROG_ADMIN_TOKEN: ${{ secrets.JFROG_ADMIN_TOKEN }}
        run: ./.github/scripts/setup/create_applications.sh

      - name: Create OIDC Integrations
        env:
          JFROG_URL: ${{ vars.JFROG_URL }}
          JFROG_ADMIN_TOKEN: ${{ secrets.JFROG_ADMIN_TOKEN }}
        run: ./.github/scripts/setup/create_oidc.sh
