name: '🔍 Discover Cleanup'

on:
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/🔍-discover-cleanup.yml'
      - '.github/scripts/setup/cleanup_project_based.sh'

permissions:
  contents: write

jobs:
  discover:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4


      - name: Install jq
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Setup JFrog CLI
        uses: EyalDelarea/setup-jfrog-cli@swampUpAppTrust
        with:
          version: latest

      - name: "Preflight: require JFROG_URL"
        run: |
          if [[ -z "${{ vars.JFROG_URL }}" ]]; then
            echo "❌ Missing vars.JFROG_URL. Set repository variable JFROG_URL before running." >&2
            exit 1
          fi

      - name: Configure JFrog CLI for Admin
        env:
          JFROG_URL: ${{ vars.JFROG_URL }}
          JFROG_ADMIN_TOKEN: ${{ secrets.JFROG_ADMIN_TOKEN }}
        run: |
          jfrog config add bookverse-admin --url="$JFROG_URL" --access-token="$JFROG_ADMIN_TOKEN" --interactive=false --overwrite
          jfrog config use bookverse-admin

      - name: Run discovery-only (no deletion)
        env:
          JFROG_URL: ${{ vars.JFROG_URL }}
          JFROG_ADMIN_TOKEN: ${{ secrets.JFROG_ADMIN_TOKEN }}
          PROJECT_KEY: ${{ vars.PROJECT_KEY || 'bookverse' }}
        run: |
          set -euo pipefail  # Enable proper error handling
          cd .github/scripts/setup
          export SKIP_PROTECTION=true
          source ./cleanup_project_based.sh
          # Allow discovery to fail gracefully but still report errors
          if ! run_discovery_preview; then
            echo "⚠️ Discovery completed with some errors, but continuing..."
            exit 0
          fi
          cd -

      - name: Commit shared discovery report
        run: |
          report_path=$(find "$GITHUB_WORKSPACE" -type f -name "*cleanup-report.json" -print -quit)
          if [[ -n "$report_path" ]]; then
            echo "Found report at: $report_path"
            mkdir -p .github
            dest_path=".github/cleanup-report.json"
            if [[ "$report_path" != "$GITHUB_WORKSPACE/$dest_path" ]]; then
              cp "$report_path" "$dest_path"
            else
              echo "Report already at $dest_path"
            fi
            git config --global user.name "BookVerse Discovery Bot"
            git config --global user.email "discovery@bookverse.demo"
            git add "$dest_path"
            if git diff --cached --quiet; then
              echo "📋 No changes to commit for cleanup report"
            else
              git commit -m "chore: Update cleanup discovery report"
              
              # Robust push with retry logic and conflict handling
              max_retries=3
              retry_count=0
              while [[ $retry_count -lt $max_retries ]]; do
                if git push origin ${{ github.ref_name }}; then
                  echo "📋 Cleanup report committed and pushed successfully"
                  break
                else
                  retry_count=$((retry_count + 1))
                  echo "Push failed (attempt $retry_count/$max_retries), attempting pull --rebase..."
                  
                  if git pull --rebase origin ${{ github.ref_name }}; then
                    echo "Rebase successful, retrying push..."
                  else
                    echo "❌ Rebase failed - likely merge conflicts"
                    git rebase --abort 2>/dev/null || true
                    if [[ $retry_count -eq $max_retries ]]; then
                      echo "❌ Failed to push after $max_retries attempts"
                      echo "Manual intervention may be required"
                      exit 1
                    fi
                    echo "Retrying with fresh pull..."
                    git reset --hard origin/${{ github.ref_name }}
                    # Re-add the updated report file and commit again
                    git add "$dest_path"
                    if ! git diff --cached --quiet; then
                      git commit -m "chore: Update cleanup discovery report (retry $retry_count)"
                    else
                      echo "No changes to commit after reset, skipping retry..."
                      break
                    fi
                  fi
                fi
              done
            fi
          else
            echo "⚠️ No cleanup report found"
          fi

      - name: 📋 Discovery Report Summary
        run: |
          echo "## 📋 Discovery Report Summary" >> $GITHUB_STEP_SUMMARY
          if [[ -f ".github/cleanup-report.json" ]]; then
            ts=$(jq -r '.metadata.timestamp' .github/cleanup-report.json)
            proj=$(jq -r '.metadata.project_key' .github/cleanup-report.json)
            total=$(jq -r '.metadata.total_items' .github/cleanup-report.json)
            repos=$(jq -r '.metadata.discovery_counts.repositories' .github/cleanup-report.json)
            users=$(jq -r '.metadata.discovery_counts.users' .github/cleanup-report.json)
            apps=$(jq -r '.metadata.discovery_counts.applications' .github/cleanup-report.json)
            stages=$(jq -r '.metadata.discovery_counts.stages' .github/cleanup-report.json)
            builds=$(jq -r '.metadata.discovery_counts.builds' .github/cleanup-report.json)
            oidc=$(jq -r '.metadata.discovery_counts.oidc // 0' .github/cleanup-report.json)
            local_count=$(jq -r '.metadata.discovery_counts.repositories_breakdown.local // 0' .github/cleanup-report.json)
            remote_count=$(jq -r '.metadata.discovery_counts.repositories_breakdown.remote // 0' .github/cleanup-report.json)
            virtual_count=$(jq -r '.metadata.discovery_counts.repositories_breakdown.virtual // 0' .github/cleanup-report.json)
            repo_type_sum=$(jq -r '((.metadata.discovery_counts.repositories_breakdown.local // 0) + (.metadata.discovery_counts.repositories_breakdown.remote // 0) + (.metadata.discovery_counts.repositories_breakdown.virtual // 0))' .github/cleanup-report.json)
            if [[ ${repo_type_sum:-0} -eq 0 && ${repos:-0} -gt 0 ]]; then
              computed=$(jq -r '
                def key_kind:
                  ( (.type // "" | ascii_downcase) as $t
                    | if $t != "" then $t
                      else (
                        (.key // "") as $k
                        | if ($k|test("-virtual$") or $k|test("^virtual-")) then "virtual"
                          elif ($k|test("-remote$") or $k|test("^remote-")) then "remote"
                          elif ($k|test("-local$") or $k|test("^local-")) then "local"
                          else ""
                        end)
                    end);
                {
                  local:   ([.plan.repositories[]? | key_kind | select(. == "local")]   | length),
                  remote:  ([.plan.repositories[]? | key_kind | select(. == "remote")]  | length),
                  virtual: ([.plan.repositories[]? | key_kind | select(. == "virtual")] | length)
                }
              ' .github/cleanup-report.json)
              local_count=$(echo "$computed" | jq -r '.local // 0')
              remote_count=$(echo "$computed" | jq -r '.remote // 0')
              virtual_count=$(echo "$computed" | jq -r '.virtual // 0')
              repo_type_sum=$(( ${local_count:-0} + ${remote_count:-0} + ${virtual_count:-0} ))
            fi
            if [[ ${repo_type_sum:-0} -eq 0 && ${repos:-0} -gt 0 ]]; then
              pv_file="/tmp/deletion_preview_for_counts.txt"
              jq -r '.deletion_preview // .deletion_plan // ""' .github/cleanup-report.json > "$pv_file"
              if [[ -s "$pv_file" ]]; then
                local_count=$(grep -E -c '^\s*.*Repository:\s+.*-local$' "$pv_file" 2>/dev/null || echo 0)
                remote_count=$(grep -E -c '^\s*.*Repository:\s+.*-remote$' "$pv_file" 2>/dev/null || echo 0)
                virtual_count=$(grep -E -c '^\s*.*Repository:\s+.*-virtual$' "$pv_file" 2>/dev/null || echo 0)
                echo "Derived repo breakdown from preview: local=$local_count remote=$remote_count virtual=$virtual_count" >&2
              fi
            fi
            domain_users=$(jq -r '.metadata.discovery_counts.domain_users // 0' .github/cleanup-report.json)
            echo "Generated: $ts" >> $GITHUB_STEP_SUMMARY
            echo "Project: $proj" >> $GITHUB_STEP_SUMMARY
            echo "Total items: $total" >> $GITHUB_STEP_SUMMARY
            echo "- 📦 Repositories: $repos" >> $GITHUB_STEP_SUMMARY
            echo "  - local: $local_count, remote: $remote_count, virtual: $virtual_count" >> $GITHUB_STEP_SUMMARY
            echo "- 👥 Users: $users" >> $GITHUB_STEP_SUMMARY
            echo "- 🚀 Applications: $apps" >> $GITHUB_STEP_SUMMARY
            echo "- 🏷️ Stages: $stages" >> $GITHUB_STEP_SUMMARY
            echo "- 🔧 Builds: $builds" >> $GITHUB_STEP_SUMMARY
            echo "- 🔐 OIDC Integrations: $oidc" >> $GITHUB_STEP_SUMMARY
            echo "- 👥 Domain users (@bookverse.com): $domain_users" >> $GITHUB_STEP_SUMMARY

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📦 Repositories:" >> $GITHUB_STEP_SUMMARY

            echo ""
            repo_list=$(jq -r '.plan.repositories[]?.key' .github/cleanup-report.json 2>/dev/null || true)
            if [[ -n "$repo_list" ]]; then echo "$repo_list" | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY; else echo "- None" >> $GITHUB_STEP_SUMMARY; fi

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 👥 Users:" >> $GITHUB_STEP_SUMMARY
            user_list=$(jq -r '.plan.users[]? | if ((.roles // [])|length)>0 then "\(.name) (roles: \((.roles // [])|join(", ")) )" else .name end' .github/cleanup-report.json 2>/dev/null || true)
            if [[ -n "$user_list" ]]; then echo "$user_list" | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY; else echo "- None" >> $GITHUB_STEP_SUMMARY; fi

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🚀 Applications:" >> $GITHUB_STEP_SUMMARY
            app_list=$(jq -r '.plan.applications[]?.key' .github/cleanup-report.json 2>/dev/null || true)
            if [[ -n "$app_list" ]]; then echo "$app_list" | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY; else echo "- None" >> $GITHUB_STEP_SUMMARY; fi

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🏷️ Stages:" >> $GITHUB_STEP_SUMMARY
            stage_list=$(jq -r '.plan.stages[]? | "\(.name) (in lifecycle: \(.in_use // false))"' .github/cleanup-report.json 2>/dev/null || true)
            if [[ -z "$stage_list" ]]; then
              preview_file="/tmp/deletion_preview.txt"
              jq -r '.deletion_preview // .deletion_plan // ""' .github/cleanup-report.json > "$preview_file"
              fallback_stages=$(grep -E "^\\s*❌ Stage: " "$preview_file" | sed -E 's/^\\s*❌ Stage: (.*)$/\1/' || true)
              if [[ -n "$fallback_stages" ]]; then
                stage_list=$(echo "$fallback_stages" | sed 's/$/ (in lifecycle: unknown)/')
              fi
            fi
            if [[ -n "$stage_list" ]]; then echo "$stage_list" | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY; else echo "- None" >> $GITHUB_STEP_SUMMARY; fi

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔧 Builds:" >> $GITHUB_STEP_SUMMARY
            build_list=$(jq -r '.plan.builds[]?.name' .github/cleanup-report.json 2>/dev/null || true)
            if [[ -n "$build_list" ]]; then echo "$build_list" | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY; else echo "- None" >> $GITHUB_STEP_SUMMARY; fi

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔐 OIDC Integrations:" >> $GITHUB_STEP_SUMMARY
            oidc_list=$(jq -r '.observations.oidc_integrations[]? // empty' .github/cleanup-report.json 2>/dev/null || true)
            if [[ -n "$oidc_list" ]]; then
              echo ""
              echo "$oidc_list" | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
            fi
            domain_users_list=$(jq -r '.plan.domain_users[]? // empty' .github/cleanup-report.json 2>/dev/null || true)
            if [[ -n "$domain_users_list" ]]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### 👥 Domain Users (@bookverse.com):" >> $GITHUB_STEP_SUMMARY
              echo "$domain_users_list" | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
            fi

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🎯 Project Validation:" >> $GITHUB_STEP_SUMMARY
            rpt_project=$(jq -r '.metadata.project_key' .github/cleanup-report.json)
            echo "- Expected project: $rpt_project" >> $GITHUB_STEP_SUMMARY
            repos_oop=$(jq -r --arg p "$rpt_project" '[.plan.repositories[]? | select(.project != $p)] | length' .github/cleanup-report.json)
            apps_oop=$(jq -r --arg p "$rpt_project" '[.plan.applications[]? | select(.project != $p)] | length' .github/cleanup-report.json)
            users_oop=$(jq -r --arg p "$rpt_project" '[.plan.users[]? | select(.project != $p)] | length' .github/cleanup-report.json)
            stages_oop=$(jq -r --arg p "$rpt_project" '[.plan.stages[]? | select(.project != $p)] | length' .github/cleanup-report.json)
            builds_oop=$(jq -r --arg p "$rpt_project" '[.plan.builds[]? | select(.project != $p)] | length' .github/cleanup-report.json)
            if [[ "$repos_oop" == "0" && "$apps_oop" == "0" && "$users_oop" == "0" && "$stages_oop" == "0" && "$builds_oop" == "0" ]]; then
              echo "- All items belong to project '$rpt_project'" >> $GITHUB_STEP_SUMMARY
            else
              echo "- Out-of-project items detected:" >> $GITHUB_STEP_SUMMARY
              echo "  • Repositories: $repos_oop" >> $GITHUB_STEP_SUMMARY
              echo "  • Applications: $apps_oop" >> $GITHUB_STEP_SUMMARY
              echo "  • Users: $users_oop" >> $GITHUB_STEP_SUMMARY
              echo "  • Stages: $stages_oop" >> $GITHUB_STEP_SUMMARY
              echo "  • Builds: $builds_oop" >> $GITHUB_STEP_SUMMARY
            fi

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "<details>" >> $GITHUB_STEP_SUMMARY
            echo "<summary>📄 Raw Discovery Preview</summary>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            preview_file="/tmp/deletion_preview.txt"
            jq -r '.deletion_preview // .deletion_plan // ""' .github/cleanup-report.json > "$preview_file"
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat "$preview_file" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "</details>" >> $GITHUB_STEP_SUMMARY

            report_url="https://github.com/${GITHUB_REPOSITORY}/blob/${GITHUB_REF_NAME}/.github/cleanup-report.json"
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📄 Report Details:" >> $GITHUB_STEP_SUMMARY
            echo "[View cleanup-report.json]($report_url)" >> $GITHUB_STEP_SUMMARY
          else
            echo "No report generated" >> $GITHUB_STEP_SUMMARY
          fi
