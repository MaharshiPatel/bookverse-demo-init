name: '🔍 Discover Cleanup'

on:
  workflow_dispatch:
    inputs:
      verbosity_level:
        description: 'Verbosity level (0=quiet, 1=normal, 2=verbose)'
        required: false
        default: '1'
        type: choice
        options:
        - '0'
        - '1'
        - '2'

permissions:
  contents: read
  actions: write

jobs:
  discover-resources:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        with:
          version: latest

      - name: Configure JFrog CLI for Admin
        env:
          JFROG_URL: ${{ vars.JFROG_URL }}
          JFROG_ADMIN_TOKEN: ${{ secrets.JFROG_ADMIN_TOKEN }}
        run: |
          jf c add bookverse-admin --url="${JFROG_URL}" --access-token="${JFROG_ADMIN_TOKEN}" --interactive=false --overwrite
          jf c use bookverse-admin

      - name: 🔍 Discovery Phase - Find Resources to Delete
        env:
          JFROG_URL: ${{ vars.JFROG_URL }}
          JFROG_ADMIN_TOKEN: ${{ secrets.JFROG_ADMIN_TOKEN }}
          VERBOSITY: ${{ inputs.verbosity_level }}
        run: |
          echo "🔍 DISCOVERY MODE: Finding resources to delete"
          echo "=============================================="
          echo ""
          echo "This workflow ONLY discovers and reports - NO DELETION occurs"
          echo ""
          
          # Create discovery-only script in the correct directory
          cd .github/scripts/setup
          cp cleanup_project_based.sh discovery_only.sh
          
          # Modify to stop after discovery (before get_user_approval)
          cat > discovery_patch.sh << 'EOF'
          echo ""
          echo "🛡️ DISCOVERY COMPLETE - NO DELETION PERFORMED"
          echo "=============================================="
          echo ""
          echo "📋 To execute the deletion:"
          echo "  1. Review the preview above carefully"
          echo "  2. Run 🗑️ Execute Cleanup workflow"
          echo "  3. Set SKIP_PROTECTION=true for automated deletion"
          echo ""
          echo "💾 Preview saved to: $preview_file"
          exit 0
          EOF
          
          # Replace the get_user_approval section with discovery completion
          sed -i '/get_user_approval/,/^fi$/r discovery_patch.sh' ./discovery_only.sh
          sed -i '/get_user_approval/,/^fi$/d' ./discovery_only.sh
          
          # Run discovery from the correct directory
          bash ./discovery_only.sh
          cd - # Return to root directory
          
          # Find the preview file and add it to job summary
          preview_file=$(find /tmp -name "deletion_preview.txt" 2>/dev/null | head -1)
          if [[ -f "$preview_file" ]]; then
            echo "📋 Preview file found: $preview_file"
          else
            echo "⚠️ Preview file not found, will extract from temp directory"
            preview_file="/tmp/bookverse_cleanup_*/deletion_preview.txt"
          fi

      - name: 📋 Discovery Report Summary
        run: |
          echo "## 🔍 Cleanup Discovery Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Discovery completed successfully**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Find and include the detailed preview file content
          preview_file=$(find /tmp -name "deletion_preview.txt" 2>/dev/null | head -1)
          if [[ -f "$preview_file" ]]; then
            echo "### 📋 Resources Discovered for Deletion:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Parse and format the preview file for better readability
            echo "#### 📊 **Quick Summary**" >> $GITHUB_STEP_SUMMARY
            repo_count=$(grep -c "📦.*:" "$preview_file" 2>/dev/null || echo "0")
            user_count=$(grep -c "👥.*:" "$preview_file" 2>/dev/null || echo "0") 
            app_count=$(grep -c "🚀.*:" "$preview_file" 2>/dev/null || echo "0")
            stage_count=$(grep -c "🏷️.*:" "$preview_file" 2>/dev/null || echo "0")
            oidc_count=$(grep -c "🔗.*:" "$preview_file" 2>/dev/null || echo "0")
            build_count=$(grep -c "🔧.*:" "$preview_file" 2>/dev/null || echo "0")
            
            echo "| Resource Type | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|---------------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| 📦 Repositories | $repo_count |" >> $GITHUB_STEP_SUMMARY
            echo "| 👥 Users | $user_count |" >> $GITHUB_STEP_SUMMARY
            echo "| 🚀 Applications | $app_count |" >> $GITHUB_STEP_SUMMARY
            echo "| 🏷️ Stages | $stage_count |" >> $GITHUB_STEP_SUMMARY
            echo "| 🔗 OIDC Integrations | $oidc_count |" >> $GITHUB_STEP_SUMMARY
            echo "| 🔧 Builds | $build_count |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Extract detailed lists for each category
            if grep -q "📦" "$preview_file"; then
              echo "#### 📦 **Repositories**" >> $GITHUB_STEP_SUMMARY
              grep -A 50 "📦" "$preview_file" | grep "^  •" | head -20 | sed 's/^  • /- `/' | sed 's/$/`/' >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
            
            if grep -q "👥" "$preview_file"; then
              echo "#### 👥 **Users**" >> $GITHUB_STEP_SUMMARY
              grep -A 30 "👥" "$preview_file" | grep "^  •" | head -15 | sed 's/^  • /- `/' | sed 's/$/`/' >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
            
            if grep -q "🚀" "$preview_file"; then
              echo "#### 🚀 **Applications**" >> $GITHUB_STEP_SUMMARY
              grep -A 20 "🚀" "$preview_file" | grep "^  •" | head -10 | sed 's/^  • /- `/' | sed 's/$/`/' >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
            
            if grep -q "🏷️" "$preview_file"; then
              echo "#### 🏷️ **Stages**" >> $GITHUB_STEP_SUMMARY
              grep -A 10 "🏷️" "$preview_file" | grep "^  •" | head -5 | sed 's/^  • /- `/' | sed 's/$/`/' >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
            
            if grep -q "🔗" "$preview_file"; then
              echo "#### 🔗 **OIDC Integrations**" >> $GITHUB_STEP_SUMMARY
              grep -A 15 "🔗" "$preview_file" | grep "^  •" | head -10 | sed 's/^  • /- `/' | sed 's/$/`/' >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "<details>" >> $GITHUB_STEP_SUMMARY
            echo "<summary>📄 <strong>Click to see complete raw discovery report</strong></summary>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat "$preview_file" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "</details>" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ⚠️ No preview file generated" >> $GITHUB_STEP_SUMMARY
            echo "Discovery may have failed or no bookverse resources were found." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Possible reasons:**" >> $GITHUB_STEP_SUMMARY
            echo "- No BookVerse project resources exist" >> $GITHUB_STEP_SUMMARY
            echo "- Discovery script failed" >> $GITHUB_STEP_SUMMARY
            echo "- Resources exist in different project scope" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. 👀 **Review the discovery report above** carefully" >> $GITHUB_STEP_SUMMARY
          echo "2. 🗑️ **Run Execute Cleanup workflow** to execute deletion" >> $GITHUB_STEP_SUMMARY
          echo "3. ⚠️ **Type 'DELETE' and optionally set skip_protection=true** for execution" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ⚠️ Important:" >> $GITHUB_STEP_SUMMARY
          echo "- **🔍 Discover Cleanup** workflow **DOES NOT DELETE** anything" >> $GITHUB_STEP_SUMMARY
          echo "- Resources are only **discovered and reported**" >> $GITHUB_STEP_SUMMARY
          echo "- Use **🗑️ Execute Cleanup** workflow for actual deletion" >> $GITHUB_STEP_SUMMARY
