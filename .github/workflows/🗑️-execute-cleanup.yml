name: '🗑️ Execute Cleanup'

on:
  workflow_dispatch:
    inputs:
      confirm_cleanup:
        description: 'Type "DELETE" to confirm cleanup (this action cannot be undone)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        with:
          version: latest

      - name: Configure JFrog CLI for Admin
        env:
          JFROG_URL: ${{ vars.JFROG_URL }}
          JFROG_ADMIN_TOKEN: ${{ secrets.JFROG_ADMIN_TOKEN }}
        run: |
          jfrog config add bookverse-admin --url="$JFROG_URL" --access-token="$JFROG_ADMIN_TOKEN" --interactive=false --overwrite
          jfrog config use bookverse-admin

      - name: Validate cleanup report freshness
        env:
          JFROG_URL: ${{ vars.JFROG_URL }}
          JFROG_ADMIN_TOKEN: ${{ secrets.JFROG_ADMIN_TOKEN }}
          PROJECT_KEY: 'bookverse'
        run: |
          set +e
          bash ./.github/scripts/setup/validate_cleanup_report.sh
          status=$?
          if [[ $status -ne 0 ]]; then
            echo "## 🗑️ Cleanup Execution Report" >> $GITHUB_STEP_SUMMARY
            if [[ -f ".github/cleanup-report.json" ]]; then
              ts=$(jq -r '.metadata.timestamp // "unknown"' .github/cleanup-report.json)
              echo "Report is not usable (missing/invalid/expired)." >> $GITHUB_STEP_SUMMARY
              echo "- Last report timestamp: $ts" >> $GITHUB_STEP_SUMMARY
            else
              echo "No cleanup report found. Please run 🔍 Discover Cleanup first." >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Next steps" >> $GITHUB_STEP_SUMMARY
            echo "- Run the 🔍 Discover Cleanup workflow to generate a fresh report (valid for 30 minutes)." >> $GITHUB_STEP_SUMMARY
            echo "- Then re-run 🗑️ Execute Cleanup." >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

      - name: Execute cleanup from report
        env:
          JFROG_URL: ${{ vars.JFROG_URL }}
          JFROG_ADMIN_TOKEN: ${{ secrets.JFROG_ADMIN_TOKEN }}
          PROJECT_KEY: 'bookverse'
        run: |
          bash ./.github/scripts/setup/cleanup_from_report.sh | tee /tmp/cleanup_execution.log

      - name: 📋 Execute Cleanup Summary
        if: always()
        run: |
          echo "## 🗑️ Cleanup Execution Report" >> $GITHUB_STEP_SUMMARY
          if [[ -f ".github/cleanup-report.json" ]]; then
            echo "Project: $(jq -r '.metadata.project_key' .github/cleanup-report.json)" >> $GITHUB_STEP_SUMMARY
            echo "Status: $(jq -r '.status' .github/cleanup-report.json)" >> $GITHUB_STEP_SUMMARY
            echo "Total items: $(jq -r '.metadata.total_items' .github/cleanup-report.json)" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔎 Detailed Items Deleted" >> $GITHUB_STEP_SUMMARY
          exec_log="/tmp/cleanup_execution.log"
          if [[ -f "$exec_log" ]]; then
            repos=$(grep -E "✅ Repository '.*' deleted successfully" "$exec_log" | sed -E "s/.*Repository '([^']+)'.*/- \1/") || true
            echo "#### 📦 Repositories" >> $GITHUB_STEP_SUMMARY
            if [[ -n "$repos" ]]; then echo "$repos" >> $GITHUB_STEP_SUMMARY; else echo "- None" >> $GITHUB_STEP_SUMMARY; fi

            users=$(grep -E "✅ User '.*' removed from project successfully" "$exec_log" | sed -E "s/.*User '([^']+)'.*/- \1/") || true
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "#### 👥 Users (removed from project)" >> $GITHUB_STEP_SUMMARY
            if [[ -n "$users" ]]; then echo "$users" >> $GITHUB_STEP_SUMMARY; else echo "- None" >> $GITHUB_STEP_SUMMARY; fi

            apps=$(grep -E "✅ Application '.*' deleted successfully" "$exec_log" | sed -E "s/.*Application '([^']+)'.*/- \1/") || true
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "#### 🚀 Applications" >> $GITHUB_STEP_SUMMARY
            if [[ -n "$apps" ]]; then echo "$apps" >> $GITHUB_STEP_SUMMARY; else echo "- None" >> $GITHUB_STEP_SUMMARY; fi

            stages=$(grep -E "✅ (Project stage|Stage) '.*' deleted successfully" "$exec_log" | sed -E "s/.*'(.*)'.*/- \1/") || true
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "#### 🏷️ Stages" >> $GITHUB_STEP_SUMMARY
            if [[ -n "$stages" ]]; then echo "$stages" >> $GITHUB_STEP_SUMMARY; else echo "- None" >> $GITHUB_STEP_SUMMARY; fi

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🧪 Post-Cleanup Verification" >> $GITHUB_STEP_SUMMARY
            if [[ -f ".github/cleanup-report.json" ]]; then
              echo "- Note: The report is not auto-refreshed after deletion. If it still shows items, run 🔍 Discover Cleanup again to regenerate it." >> $GITHUB_STEP_SUMMARY
            fi

            builds=$(grep -E "✅ Build '.*' deleted successfully" "$exec_log" | sed -E "s/.*Build '([^']+)'.*/- \1/") || true
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "#### 🔧 Builds" >> $GITHUB_STEP_SUMMARY
            if [[ -n "$builds" ]]; then echo "$builds" >> $GITHUB_STEP_SUMMARY; else echo "- None" >> $GITHUB_STEP_SUMMARY; fi

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "<details>" >> $GITHUB_STEP_SUMMARY
            echo "<summary>📄 Raw Execution Log (tail)</summary>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            tail -200 "$exec_log" >> $GITHUB_STEP_SUMMARY || true
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "</details>" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Execution log not found" >> $GITHUB_STEP_SUMMARY
          fi
