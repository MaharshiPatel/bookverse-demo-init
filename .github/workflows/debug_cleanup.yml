name: 'Debug Cleanup - Investigate Missing Resources'
on:
  workflow_dispatch:
    inputs:
      investigation_type:
        description: 'Type of investigation to run'
        required: true
        type: choice
        options:
          - 'repositories'
          - 'builds' 
          - 'users'
          - 'stages'
          - 'all'

jobs:
  debug-cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        with:
          version: latest

      - name: Configure JFrog CLI for Admin
        run: |
          jfrog config add bookverse-admin --url=${{ vars.JFROG_URL }} --access-token=${{ secrets.JFROG_ADMIN_TOKEN }} --interactive=false
          jfrog config use bookverse-admin

      - name: Debug Repository Discovery
        if: github.event.inputs.investigation_type == 'repositories' || github.event.inputs.investigation_type == 'all'
        env:
          JFROG_URL: ${{ vars.JFROG_URL }}
          JFROG_ADMIN_TOKEN: ${{ secrets.JFROG_ADMIN_TOKEN }}
          PROJECT_KEY: bookverse
        run: |
          echo "üîç REPOSITORY INVESTIGATION"
          echo "==========================="
          echo ""
          
          echo "1. What the current cleanup script finds:"
          echo "----------------------------------------"
          # Simulate current cleanup script logic
          response_file=$(mktemp)
          jf rt curl -X GET -H "X-JFrog-Project: bookverse" "/api/repositories?project=bookverse" --output "$response_file" --silent
          echo "Current script endpoint: /api/repositories?project=bookverse"
          echo "Response size: $(wc -c < "$response_file") bytes"
          if [[ -s "$response_file" ]]; then
            echo "Current script would find:"
            jq -r --arg prefix "bookverse" '.[] | select(.key | startswith($prefix)) | .key' "$response_file" || echo "No repositories found"
          else
            echo "No response from current endpoint"
          fi
          
          echo ""
          echo "2. What actually exists - ALL repositories:"
          echo "------------------------------------------"
          # Get ALL repositories
          all_repos_file=$(mktemp)
          jf rt curl -X GET "/api/repositories" --output "$all_repos_file" --silent
          echo "All repositories endpoint: /api/repositories"
          echo "Response size: $(wc -c < "$all_repos_file") bytes"
          if [[ -s "$all_repos_file" ]]; then
            echo "ALL repositories containing 'bookverse':"
            jq -r '.[] | select(.key | contains("bookverse")) | .key' "$all_repos_file" || echo "No bookverse repositories found"
            echo ""
            echo "Count by type:"
            echo "Local: $(jq -r '.[] | select(.key | contains("bookverse")) | select(.type == "LOCAL") | .key' "$all_repos_file" | wc -l)"
            echo "Remote: $(jq -r '.[] | select(.key | contains("bookverse")) | select(.type == "REMOTE") | .key' "$all_repos_file" | wc -l)"
            echo "Virtual: $(jq -r '.[] | select(.key | contains("bookverse")) | select(.type == "VIRTUAL") | .key' "$all_repos_file" | wc -l)"
          fi

      - name: Debug Build Discovery
        if: github.event.inputs.investigation_type == 'builds' || github.event.inputs.investigation_type == 'all'
        env:
          JFROG_URL: ${{ vars.JFROG_URL }}
          JFROG_ADMIN_TOKEN: ${{ secrets.JFROG_ADMIN_TOKEN }}
        run: |
          echo "üîç BUILD INVESTIGATION"
          echo "====================="
          echo ""
          
          echo "1. Current cleanup script build handling:"
          echo "----------------------------------------"
          echo "‚ùå Current script does NOT handle builds at all!"
          echo ""
          
          echo "2. What builds actually exist:"
          echo "-----------------------------"
          builds_file=$(mktemp)
          jf rt curl -X GET "/api/build" --output "$builds_file" --silent
          echo "Builds endpoint: /api/build"
          echo "Response size: $(wc -c < "$builds_file") bytes"
          if [[ -s "$builds_file" ]]; then
            echo "Builds found:"
            jq -r '.builds[]? | .uri' "$builds_file" 2>/dev/null | head -20 || echo "Could not parse builds"
            echo "Total builds: $(jq -r '.builds[]? | .uri' "$builds_file" 2>/dev/null | wc -l || echo 0)"
          fi

      - name: Debug User Discovery  
        if: github.event.inputs.investigation_type == 'users' || github.event.inputs.investigation_type == 'all'
        env:
          JFROG_URL: ${{ vars.JFROG_URL }}
          JFROG_ADMIN_TOKEN: ${{ secrets.JFROG_ADMIN_TOKEN }}
          PROJECT_KEY: bookverse
        run: |
          echo "üîç USER INVESTIGATION"
          echo "===================="
          echo ""
          
          echo "1. What the current cleanup script finds:"
          echo "----------------------------------------"
          users_file=$(mktemp)
          jf rt curl -X GET "/api/security/users" --output "$users_file" --silent
          echo "Current script endpoint: /api/security/users"
          echo "Response size: $(wc -c < "$users_file") bytes"
          if [[ -s "$users_file" ]]; then
            echo "Current script would find (bookverse.com users):"
            jq -r '.[] | select(.name | contains("@bookverse.com")) | .name' "$users_file" || echo "No @bookverse.com users found"
          fi
          
          echo ""
          echo "2. Project-specific users:"
          echo "-------------------------"
          project_users_file=$(mktemp)
          curl -s -H "Authorization: Bearer $JFROG_ADMIN_TOKEN" \
               -H "Content-Type: application/json" \
               "$JFROG_URL/access/api/v1/projects/$PROJECT_KEY/users" \
               -o "$project_users_file"
          echo "Project users endpoint: /access/api/v1/projects/$PROJECT_KEY/users"
          echo "Response size: $(wc -c < "$project_users_file") bytes"
          if [[ -s "$project_users_file" ]]; then
            echo "Project users found:"
            jq -r '.[]? | .name // .username' "$project_users_file" 2>/dev/null || cat "$project_users_file"
          fi

      - name: Debug Stages Discovery
        if: github.event.inputs.investigation_type == 'stages' || github.event.inputs.investigation_type == 'all'
        env:
          JFROG_URL: ${{ vars.JFROG_URL }}
          JFROG_ADMIN_TOKEN: ${{ secrets.JFROG_ADMIN_TOKEN }}
          PROJECT_KEY: bookverse
        run: |
          echo "üîç STAGES INVESTIGATION"
          echo "======================"
          echo ""
          
          echo "1. What the current cleanup script finds:"
          echo "----------------------------------------"
          stages_file=$(mktemp)
          curl -s -H "Authorization: Bearer $JFROG_ADMIN_TOKEN" \
               -H "Content-Type: application/json" \
               "$JFROG_URL/access/api/v2/stages" \
               -o "$stages_file"
          echo "Current script endpoint: /access/api/v2/stages"
          echo "Response size: $(wc -c < "$stages_file") bytes"
          if [[ -s "$stages_file" ]]; then
            echo "Current script would find (bookverse- stages):"
            jq -r --arg prefix "bookverse" '.[] | select(.name | startswith($prefix + "-")) | .name' "$stages_file" || echo "No bookverse- stages found"
          fi
          
          echo ""
          echo "2. Project-specific stages:"
          echo "--------------------------"
          project_stages_file=$(mktemp)
          curl -s -H "Authorization: Bearer $JFROG_ADMIN_TOKEN" \
               -H "Content-Type: application/json" \
               "$JFROG_URL/access/api/v1/projects/$PROJECT_KEY/stages" \
               -o "$project_stages_file"
          echo "Project stages endpoint: /access/api/v1/projects/$PROJECT_KEY/stages"
          echo "Response size: $(wc -c < "$project_stages_file") bytes"
          if [[ -s "$project_stages_file" ]]; then
            echo "Project stages found:"
            jq -r '.[]? | .name' "$project_stages_file" 2>/dev/null || cat "$project_stages_file"
          fi

      - name: Summary and Recommendations
        run: |
          echo ""
          echo "üéØ INVESTIGATION SUMMARY"
          echo "======================="
          echo ""
          echo "Based on the investigation above, the cleanup script is missing:"
          echo ""
          echo "1. üì¶ REPOSITORIES:"
          echo "   ‚ùå Current: Only searches with project parameter"
          echo "   ‚úÖ Should: Search ALL repositories and filter by 'bookverse' (not just prefix)"
          echo ""
          echo "2. üèóÔ∏è BUILDS:"
          echo "   ‚ùå Current: No build cleanup at all"
          echo "   ‚úÖ Should: Add build information cleanup"
          echo ""
          echo "3. üë• USERS:"
          echo "   ‚ùå Current: Only searches for @bookverse.com email users"
          echo "   ‚úÖ Should: Also clean project-specific users/admins"
          echo ""
          echo "4. üè∑Ô∏è STAGES:"
          echo "   ‚ùå Current: May not find all project stages"
          echo "   ‚úÖ Should: Use project-specific stage APIs"
          echo ""
          echo "üõ†Ô∏è REQUIRED FIXES:"
          echo "=================="
          echo "1. Enhanced repository discovery (all types, better filtering)"
          echo "2. Add build information cleanup"
          echo "3. Add project user/admin cleanup"
          echo "4. Improve stage discovery and cleanup"
          echo "5. More comprehensive artifact cleanup"
