name: 'üêõ Cleanup JFrog Platform - DEBUG MODE'

on:
  workflow_dispatch:
    inputs:
      confirm_cleanup:
        description: 'Type "DELETE" to confirm cleanup (this action cannot be undone)'
        required: true
        type: string
      debug_mode:
        description: 'Enable debug mode (SSH access + detailed logging)'
        required: false
        type: boolean
        default: true
      dry_run_only:
        description: 'Dry run only (show what would be deleted without deleting)'
        required: false
        type: boolean
        default: true
      pause_points:
        description: 'Pause at critical points for inspection'
        required: false
        type: boolean
        default: false
      verbosity_level:
        description: 'Verbosity level (0=silent, 1=normal, 2=debug, 3=trace)'
        required: false
        type: choice
        options:
          - '1'
          - '2'
          - '3'
        default: '2'

env:
  # Enable GitHub Actions debug logging
  ACTIONS_STEP_DEBUG: true
  ACTIONS_RUNNER_DEBUG: true

jobs:
  cleanup-debug:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Debug Environment
        run: |
          echo "üêõ DEBUG MODE ENABLED"
          echo "===================="
          echo "Debug mode: ${{ inputs.debug_mode }}"
          echo "Dry run only: ${{ inputs.dry_run_only }}"
          echo "Pause points: ${{ inputs.pause_points }}"
          echo "Verbosity: ${{ inputs.verbosity_level }}"
          echo "Confirmation: ${{ inputs.confirm_cleanup }}"
          echo ""
          echo "Environment:"
          echo "- Working Directory: $(pwd)"
          echo "- User: $(whoami)"
          echo "- Available space: $(df -h . | tail -1)"
          echo ""

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        with:
          version: latest

      - name: Configure JFrog CLI for Admin
        run: |
          echo "üîß Configuring JFrog CLI..."
          jfrog config add bookverse-admin --url=${{ vars.JFROG_URL }} --access-token=${{ secrets.JFROG_ADMIN_TOKEN }} --interactive=false
          jfrog config use bookverse-admin
          
          echo "‚úÖ JFrog CLI configured"
          echo "Testing connectivity..."
          jfrog rt ping || echo "‚ö†Ô∏è JFrog connection test failed"

      - name: Debug - SSH Access (Pre-Cleanup)
        if: ${{ inputs.debug_mode }}
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true
          sudo: false
        timeout-minutes: 30

      - name: Validate Confirmation
        run: |
          echo "üîç Validating confirmation input..."
          
          if [[ "${{ inputs.dry_run_only }}" == "true" ]]; then
            echo "üèÉ DRY RUN MODE: No actual deletions will be performed"
          elif [[ "${{ inputs.confirm_cleanup }}" != "DELETE" ]]; then
            echo "‚ùå Cleanup cancelled: Invalid confirmation input"
            echo "   You must type 'DELETE' to confirm cleanup"
            echo "   Current input: '${{ inputs.confirm_cleanup }}'"
            exit 1
          else
            echo "‚ö†Ô∏è  DESTRUCTIVE MODE: Real deletions will be performed!"
            echo "‚úÖ Cleanup confirmed. Proceeding with BookVerse project cleanup..."
          fi

      - name: Pre-Cleanup Resource Discovery
        env:
          JFROG_URL: ${{ vars.JFROG_URL }}
          JFROG_ADMIN_TOKEN: ${{ secrets.JFROG_ADMIN_TOKEN }}
          VERBOSITY: ${{ inputs.verbosity_level }}
        run: |
          echo "üîç PRE-CLEANUP RESOURCE DISCOVERY"
          echo "================================="
          
          # Create a discovery-only version of the script
          cp ./.github/scripts/setup/cleanup_project_based.sh ./cleanup_discovery.sh
          
          # Modify it to only do discovery (no deletions)
          sed -i 's/delete_project_/discover_/g' ./cleanup_discovery.sh
          sed -i '/curl.*DELETE\|jf.*delete\|rm -rf/d' ./cleanup_discovery.sh
          
          echo "Running resource discovery..."
          bash ./cleanup_discovery.sh || echo "Discovery completed with warnings"

      - name: Pause Point - Review Discovery Results
        if: ${{ inputs.pause_points }}
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true
          sudo: false
        timeout-minutes: 15

      - name: Cleanup BookVerse Project (ENHANCED DEBUG)
        env:
          JFROG_URL: ${{ vars.JFROG_URL }}
          JFROG_ADMIN_TOKEN: ${{ secrets.JFROG_ADMIN_TOKEN }}
          VERBOSITY: ${{ inputs.verbosity_level }}
          DRY_RUN: ${{ inputs.dry_run_only }}
          DEBUG_MODE: ${{ inputs.debug_mode }}
        run: |
          echo "üßπ STARTING CLEANUP WITH DEBUG ENHANCEMENTS"
          echo "==========================================="
          
          if [[ "${{ inputs.dry_run_only }}" == "true" ]]; then
            echo "üèÉ DRY RUN MODE: Simulating cleanup operations"
            # Add --dry-run flag to the script if it supports it
            bash ./.github/scripts/setup/cleanup_project_based.sh --dry-run || \
            bash ./.github/scripts/setup/cleanup_project_based.sh
          else
            echo "‚ö†Ô∏è  LIVE MODE: Performing actual cleanup"
            bash ./.github/scripts/setup/cleanup_project_based.sh
          fi

      - name: Post-Cleanup Verification
        if: always()
        env:
          JFROG_URL: ${{ vars.JFROG_URL }}
          JFROG_ADMIN_TOKEN: ${{ secrets.JFROG_ADMIN_TOKEN }}
        run: |
          echo "üîç POST-CLEANUP VERIFICATION"
          echo "============================"
          
          echo "Checking remaining resources..."
          
          # Check if project still exists
          PROJECT_EXISTS=$(curl -s -H "Authorization: Bearer ${{ secrets.JFROG_ADMIN_TOKEN }}" \
            "${{ vars.JFROG_URL }}/access/api/v1/projects/bookverse" | \
            jq -r '.project_key // "NOT_FOUND"')
          
          echo "Project status: $PROJECT_EXISTS"
          
          # Show any remaining bookverse resources
          echo ""
          echo "Remaining repositories with 'bookverse':"
          jfrog rt curl "/api/repositories" | jq -r '.[] | select(.key | contains("bookverse")) | .key' || echo "None found"
          
          echo ""
          echo "Verification complete."

      - name: Debug - SSH Access (Post-Cleanup)
        if: ${{ inputs.debug_mode && always() }}
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true
          sudo: false
        timeout-minutes: 30

      - name: Upload Debug Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cleanup-debug-logs-${{ github.run_number }}
          path: |
            /tmp/bookverse_cleanup_*
            *.log
            cleanup_discovery.sh
          retention-days: 7

      - name: Debug Summary
        if: always()
        run: |
          echo "üìä DEBUG SESSION SUMMARY"
          echo "========================"
          echo "- Mode: ${{ inputs.dry_run_only && 'DRY RUN' || 'LIVE' }}"
          echo "- Debug enabled: ${{ inputs.debug_mode }}"
          echo "- Verbosity: ${{ inputs.verbosity_level }}"
          echo "- Pause points: ${{ inputs.pause_points }}"
          echo "- Job status: ${{ job.status }}"
          echo ""
          echo "üîç Check the uploaded artifacts for detailed logs"
          echo "üîó SSH sessions were available for interactive debugging"
